import BarData from "../model/BarData";

export const AppData = {
  CANVAS_WIDTH: 800,
  CANVAS_HEIGHT: 500,
  MAX_VALUE: 50,
  DEFAULT_COLOR: "black",
};

export const Algorithms = {
  SELECTION_SORT: 0,
  INSERTION_SORT: 1,
};

/**
 * The type generated by yield and return statements in
 * the generator functions of these algorithms.
 */
export type GeneratorResult = {
  result: number[];
  colors: {};
};

export function createBars() {
  const bars = [];
  for (let i = 1; i <= AppData.MAX_VALUE; ++i) {
    bars.push(new BarData(i, AppData.DEFAULT_COLOR));
  }
  return bars;
}

export function shuffle(bars: BarData[]) {
  for (let i = AppData.MAX_VALUE - 1; i > 0; --i) {
    const randIndex = Math.round(Math.random() * i);
    [bars[randIndex], bars[i]] = [bars[i], bars[randIndex]];
  }
}

// generator function for insertion sort.
export const insertionSortGenerator = function* (array: BarData[]) {
  for (let i = 1; i < array.length; ++i) {
    for (let j = i; j > 0; --j) {
      yield { result: array, colors: { [j]: "red" } };
      if (array[j - 1].data > array[j].data) {
        [array[j - 1], array[j]] = [array[j], array[j - 1]];
      }
      yield { result: array };
    }
  }
  return array;
};

// generator function for selection sort.
export const selectionSortGenerator = function* (array: BarData[]) {
  for (let i = 0; i < array.length; ++i) {
    let min = i;
    for (let j = min; j < array.length; ++j) {
      yield { iter: i, index: j, array: array, before: true, loop: false };
      if (array[j].data < array[min].data) {
        min = j;
      }
      yield { iter: i, index: j, array: array, before: false, loop: false };
    }
    [array[i], array[min]] = [array[min], array[i]];
    yield { iter: i, index: min, array: array, before: false, loop: true };
  }
  return array;
};
